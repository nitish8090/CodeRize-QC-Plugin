# -*- coding: utf-8 -*-
"""
/***************************************************************************
 CodeRizeQCPluginDockWidget
                                 A QGIS plugin
 CodeRize QC Plugin
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-10-20
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Nitish Patel @ CodeRize Technologies
        email                : demo@email.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import QtGui, QtWidgets, uic
from qgis.PyQt.QtCore import pyqtSignal
from qgis.utils import iface
from .coderize_qc_plugin_load_aoi_dialog import CRFeatureApproverDialog
from ..Tools import SelectorTool

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'coderize_qc_plugin_dockwidget_base.ui'))


class CodeRizeQCPluginDockWidget(QtWidgets.QDockWidget, FORM_CLASS):
    closingPlugin = pyqtSignal()

    def __init__(self, parent=None):
        """Constructor."""
        super(CodeRizeQCPluginDockWidget, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        self.btn_load_aoi_tool.clicked.connect(self.load_aoi_dialog_show)
        self.btn_selector_tool.clicked.connect(self.activate_selector_tool)

        self.selector_tool = SelectorTool(iface.mapCanvas())

        self.load_aoi_dialog = CRFeatureApproverDialog()

    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()

    def load_aoi_dialog_show(self):
        self.load_aoi_dialog.show()
        print("Loading AOI")

    def activate_selector_tool(self):
        print("tool activated")
        iface.mapCanvas().setMapTool(self.selector_tool)
